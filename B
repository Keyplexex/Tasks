import numpy as np
n, m = map(int, input().split())

first = []
for _ in range(n):
    first.append(list(map(int, input().split())))

third = []
for _ in range(m):
    third.append(list(map(int, input().split())))

line = [[] for _ in range(m**2)]
ans = []

cnt = 0
for j in range(n):
    for i in range(n):
        l = n - m + 1 + i
        r = n - m + 1 + j
        if l <= n and r <= n and cnt <= m**2:
            for u in range(j, r):
                for t in range(i, l):
                    line[cnt].append(float(first[u][t]))
            cnt += 1

for j in range(m):
    for i in range(m):
        ans.append(float(third[j][i]))

a = np.array(line)
b = np.array(ans)


def gauss_elimination(A, b):
    rows, cols = A.shape

    for i in range(min(rows, cols)):
        max_row = np.argmax(np.abs(A[i:, i])) + i

        A[[i, max_row]] = A[[max_row, i]]
        b[[i, max_row]] = b[[max_row, i]]

        for j in range(i + 1, rows):
            if A[i][i] != 0:
                c = A[j][i] / A[i][i]
            else:
                c = A[j][i] / 1
            A[j] = A[j] - c * A[i]
            b[j] = b[j] - c * b[i]

    x = np.zeros(cols)
    for i in range(cols - 1, -1, -1):
        if i >= rows:
            x[i] = 0
        else:
            if A[i][i] == 0:
                if b[i] == 0:
                    x[i] = 1
            else:
                x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i][i]

    return x


x = gauss_elimination(a, b)
x = x.reshape((n-m+1, n-m+1))

for i in range(n-m+1):
    print(*x[i])
